// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id        String  @id @default(uuid())
//   UserID    String? @unique
//   name      String
//   email     String  @unique
//   password  String
//   phone     String?
//   image_url String?

//   roleId String?
//   role   Role?   @relation(fields: [roleId], references: [id])

//   branchId String?
//   branch   Branch? @relation(fields: [branchId], references: [id])

//   // Self-referencing field for hierarchical relationships
//   managerId String?
//   manager   User?   @relation("UserManager", fields: [managerId], references: [id])

//   // Users under this manager (subordinates)
//   subordinates User[] @relation("UserManager")

//   // Optional fields for future sales incentive system
//   salesTarget   Float? @default(0)
//   salesAchieved Float? @default(0)
//   incentive     Float? @default(0)

//   isActive  Boolean  @default(true)
//   isLogin   Boolean  @default(false)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Role {
//   id          String           @id @default(uuid())
//   name        String           @unique
//   description String?
//   users       User[]
//   permissions RolePermission[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Permission {
//   id          String           @id @default(uuid())
//   name        String           @unique
//   description String?
//   roles       RolePermission[]
// }

// model RolePermission {
//   id           String     @id @default(uuid())
//   role         Role       @relation(fields: [roleId], references: [id])
//   roleId       String
//   permission   Permission @relation(fields: [permissionId], references: [id])
//   permissionId String
//   access       String? // "View", "Update", "Delete", etc.

//   @@unique([roleId, permissionId, access]) // optional to avoid duplicates
// }

// model Branch {
//   id        String   @id @default(uuid())
//   name      String   @unique // Add @unique directive here
//   location  String?
//   users     User[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// {{// NEW MODEL}}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid())
  UserID      String? @unique
  name        String
  email       String  @unique
  password    String
  phone       String?
  image_url   String?
  designation String?
  countryCode String?

  // Role Relation
  roleId String?
  role   Role?   @relation(fields: [roleId], references: [id])

  // Branch Relation
  branchId String?
  branch   Branch? @relation(fields: [branchId], references: [id])

  // Investments
  investments Investment[] @relation("UserInvestments")

  // Manager Relation
  managerId    String?
  manager      User?   @relation("UserManager", fields: [managerId], references: [id])
  subordinates User[]  @relation("UserManager")

  // Head Relation (new)
  headId   String?
  head     User?   @relation("UserHead", fields: [headId], references: [id])
  headTeam User[]  @relation("UserHead")

  // Performance
  salesTarget   Float? @default(0)
  salesAchieved Float? @default(0)
  incentive     Float? @default(0)

  // Status
  isActive  Boolean @default(true)
  isLogin   Boolean @default(false)
  isAdmin   Boolean @default(false)
  isHead    Boolean @default(false)
  isManager Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Assigned Investors
  assignedInvestors Investor[]
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  access       String?

  @@unique([roleId, permissionId, access])
}

// Branch model
model Branch {
  id        String   @id @default(uuid())
  name      String   @unique
  location  String?
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Many-to-many relationship with InvestmentOpportunity
  investmentOpportunities InvestmentOpportunity[] @relation("OpportunityBranches")

  // Many-to-many relation with OpportunityBranch
  opportunityBranches OpportunityBranch[]

  investments Investment[]
}

model Investor {
  id                    String       @id @default(uuid())
  name                  String
  email                 String       @unique
  phone                 String?
  type                  String // Individual, HNI, NRI, Company etc.
  address               String?
  pan                   String?
  aadhaar               String?
  gstNumber             String?
  referredBy            String?
  status                String       @default("Pending")
  password              String
  relationshipManagerId String?
  relationshipManager   User?        @relation(fields: [relationshipManagerId], references: [id])
  documents             String[]
  investments           Investment[]
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
}

model InvestmentType {
  id            String                  @id @default(uuid())
  name          String                  @unique
  description   String?
  opportunities InvestmentOpportunity[]
}

model BusinessCategory {
  id            String                  @id @default(uuid())
  name          String                  @unique
  description   String?
  opportunities InvestmentOpportunity[]
}

// Investment Opportunity model
model InvestmentOpportunity {
  id                   String            @id @default(uuid())
  name                 String
  brandName            String
  description          String
  minAmount            Float
  maxAmount            Float?
  roiPercent           Float
  turnOverPercentage   Float?
  turnOverAmount       Float?
  renewalFee           Float?
  lockInMonths         Int
  exitOptions          String?
  payoutMode           String // Monthly, Quarterly, etc.
  isActive             Boolean @default(true)
  documents            String[] // Array of file URLs

  investmentTypeId     String
  investmentType       InvestmentType @relation(fields: [investmentTypeId], references: [id])

  businessCategoryId   String
  businessCategory     BusinessCategory @relation(fields: [businessCategoryId], references: [id])

  investments          Investment[]

  sales                Sales[] // Sales data linked to the opportunity

  branches             Branch[] @relation("OpportunityBranches")

  opportunityBranches  OpportunityBranch[]

  isMasterFranchise    Boolean @default(false)
  isSignature          Boolean @default(false)
  signatureStoreLocation String?

  // NEW Relation with territories
  territoryMasters     TerritoryMaster[] // New relation for territories
}


model TerritoryMaster {
  id             String             @id @default(uuid())
  opportunityId  String
  opportunity    InvestmentOpportunity @relation(fields: [opportunityId], references: [id])
  territoryId    String
  territory      Territory            @relation(fields: [territoryId], references: [id])

  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}


// New Model to store the selected branches for an opportunity
model OpportunityBranch {
  id            String                @id @default(uuid())
  opportunityId String
  opportunity   InvestmentOpportunity @relation(fields: [opportunityId], references: [id])
  branchId      String
  branch        Branch                @relation(fields: [branchId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Investment model
model Investment {
  id         String   @id @default(uuid())
  investorId String
  investor   Investor @relation(fields: [investorId], references: [id])

  opportunityId String
  createdById   String?

  opportunity InvestmentOpportunity @relation(fields: [opportunityId], references: [id])
  createdBy   User?                 @relation("UserInvestments", fields: [createdById], references: [id])

  amount          Float
  date            DateTime
  roiPercent      Float?
  payoutMode      String
  coolOffPeriod   DateTime?
  contractStart   DateTime
  contractEnd     DateTime
  paymentMethod   String
  agreementSigned Boolean   @default(false)
  status          String    @default("Ongoing")

  payouts Payout[]

  branchId String
  branch   Branch @relation(fields: [branchId], references: [id]) // One investment belongs to one branch
}

model Payout {
  id           String    @id @default(uuid())
  investmentId String
  dueDate      DateTime
  amountDue    Float
  amountPaid   Float?
  paidDate     DateTime?
  paymentMode  String?
  receiptRef   String?
  notes        String?

  investment Investment @relation(fields: [investmentId], references: [id])
}

model Sales {
  id            String   @id @default(uuid())
  opportunityId String
  amount        Float // Amount of sales for the day
  date          DateTime // The date of the sale

  opportunity InvestmentOpportunity @relation(fields: [opportunityId], references: [id])
}

model Territory {
  id     String @id @default(uuid())
  name   String @unique
  region String
  // Optional relation if you link Territories to Branches:
  // branches Branch[]
  territoryMasters  TerritoryMaster[]
  @@map("territories")
}
