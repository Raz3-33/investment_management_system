generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExecutiveAssignment {
  associateId String
  executiveId String
  createdAt   DateTime @default(now())
  associate User @relation("AssociateExec_Associate", fields: [associateId], references: [id], onDelete: Cascade)
  executive User @relation("AssociateExec_Executive", fields: [executiveId], references: [id], onDelete: Cascade)
  @@id([associateId, executiveId])
}


model User {
  id                             String                     @id @default(uuid())
  UserID                         String?                    @unique
  name                           String
  email                          String                     @unique
  password                       String
  phone                          String?
  image_url                      String?
  designation                    String?
  countryCode                    String?
  roleId                         String?
  branchId                       String?
  userLevel                      UserLevel                  @default(ASSOCIATE)
  administrateId                 String?
  headId                         String?
  managerId                      String?
  salesTarget                    Float?                     @default(0)
  salesAchieved                  Float?                     @default(0)
  incentive                      Float?                     @default(0)
  isActive                       Boolean                    @default(true)
  isLogin                        Boolean                    @default(false)
  isAdmin                        Boolean                    @default(false)
  isHead                         Boolean                    @default(false)
  isManager                      Boolean                    @default(false)
  createdAt                      DateTime                   @default(now())
  updatedAt                      DateTime                   @updatedAt
  leadSuccessCoordinatorOf       BookingFormOfficeDetails[] @relation("LeadSuccessCoordinator")
  partnerRelationshipExecutiveOf BookingFormOfficeDetails[] @relation("PartnerRelationshipExecutive")
  salesOnboardingManagerOf       BookingFormOfficeDetails[] @relation("SalesOnboardingManager")
  investments                    Investment[]               @relation("UserInvestments")
  assignedInvestors              Investor[]
  administrate                   User?                      @relation("UserAdministrate", fields: [administrateId], references: [id])
  administrateTeam               User[]                     @relation("UserAdministrate")
  branch                         Branch?                    @relation(fields: [branchId], references: [id])
  executivesOfMe                 ExecutiveAssignment[]      @relation("AssociateExec_Executive") // I (Executive) have many associates
  myExecutives                   ExecutiveAssignment[]      @relation("AssociateExec_Associate") // I (Associate) have many executives

  head         User?  @relation("UserHead", fields: [headId], references: [id])
  headTeam     User[] @relation("UserHead")
  manager      User?  @relation("UserManager", fields: [managerId], references: [id])
  subordinates User[] @relation("UserManager")
  role         Role?  @relation(fields: [roleId], references: [id])
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  access       String?
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId, access])
}

model Branch {
  id                      String                     @id @default(uuid())
  name                    String                     @unique
  location                String?
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
  officeDetails           BookingFormOfficeDetails[]
  investments             Investment[]
  opportunityBranches     OpportunityBranch[]
  users                   User[]
  investmentOpportunities InvestmentOpportunity[]    @relation("OpportunityBranches")
}

model Brand {
  id                    String                  @id
  name                  String
  description           String?
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  InvestmentOpportunity InvestmentOpportunity[]
}

model Investor {
  id                    String       @id @default(uuid())
  name                  String
  email                 String       @unique
  phone                 String?
  type                  String
  address               String?
  pan                   String?
  aadhaar               String?
  gstNumber             String?
  referredBy            String?
  status                String       @default("Pending")
  password              String
  relationshipManagerId String?
  documents             String[]
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  investments           Investment[]
  relationshipManager   User?        @relation(fields: [relationshipManagerId], references: [id])
}

model InvestmentType {
  id            String                  @id @default(uuid())
  name          String                  @unique
  description   String?
  opportunities InvestmentOpportunity[]
}

model BusinessCategory {
  id            String                  @id @default(uuid())
  name          String                  @unique
  description   String?
  opportunities InvestmentOpportunity[]
}

model InvestmentOpportunity {
  id                     String              @id @default(uuid())
  name                   String
  brandName              String
  brandId                String
  description            String
  minAmount              Float
  maxAmount              Float?
  roiPercent             Float
  turnOverPercentage     Float?
  turnOverAmount         Float?
  renewalFee             Float?
  lockInMonths           Int
  exitOptions            String?
  payoutMode             String
  isActive               Boolean             @default(true)
  documents              String[]
  investmentTypeId       String
  businessCategoryId     String
  isMasterFranchise      Boolean             @default(false)
  isSignature            Boolean             @default(false)
  signatureStoreLocation String?
  investments            Investment[]
  opportunityBranches    OpportunityBranch[]
  sales                  Sales[]
  territoryMasters       TerritoryMaster[]
  brand                  Brand               @relation(fields: [brandId], references: [id])
  businessCategory       BusinessCategory    @relation(fields: [businessCategoryId], references: [id])
  investmentType         InvestmentType      @relation(fields: [investmentTypeId], references: [id])
  territories            Territory[]
  branches               Branch[]            @relation("OpportunityBranches")

  @@map("investment_opportunities")
}

model TerritoryMaster {
  id            String                @id @default(uuid())
  opportunityId String
  territoryId   String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  opportunity   InvestmentOpportunity @relation(fields: [opportunityId], references: [id])
  territory     Territory             @relation(fields: [territoryId], references: [id])
}

model OpportunityBranch {
  id            String                @id @default(uuid())
  opportunityId String
  branchId      String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  branch        Branch                @relation(fields: [branchId], references: [id])
  opportunity   InvestmentOpportunity @relation(fields: [opportunityId], references: [id])
}

model Investment {
  id              String                @id @default(uuid())
  investorId      String
  opportunityId   String
  createdById     String?
  amount          Float
  date            DateTime
  roiPercent      Float?
  payoutMode      String
  coolOffPeriod   DateTime?
  contractStart   DateTime
  contractEnd     DateTime
  paymentMethod   String
  agreementSigned Boolean               @default(false)
  status          String                @default("Ongoing")
  branchId        String
  branch          Branch                @relation(fields: [branchId], references: [id])
  createdBy       User?                 @relation("UserInvestments", fields: [createdById], references: [id])
  investor        Investor              @relation(fields: [investorId], references: [id])
  opportunity     InvestmentOpportunity @relation(fields: [opportunityId], references: [id])
  payouts         Payout[]
}

model Payout {
  id           String     @id @default(uuid())
  investmentId String
  dueDate      DateTime
  amountDue    Float
  amountPaid   Float?
  paidDate     DateTime?
  paymentMode  String?
  receiptRef   String?
  notes        String?
  investment   Investment @relation(fields: [investmentId], references: [id])
}

model Sales {
  id            String                @id @default(uuid())
  opportunityId String
  amount        Float
  date          DateTime
  opportunity   InvestmentOpportunity @relation(fields: [opportunityId], references: [id])
}

model Territory {
  id                         String                       @id @default(uuid())
  assignmentType             String
  location                   String?
  pincode                    String?
  city                       String?
  imageUrl                   String?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  investmentOpportunityId    String?
  isBooked                   Boolean                      @default(false)
  BookingFormPersonalDetails BookingFormPersonalDetails[]
  territoryMasters           TerritoryMaster[]
  InvestmentOpportunity      InvestmentOpportunity?       @relation(fields: [investmentOpportunityId], references: [id])

  @@map("territories")
}

model BookingFormPersonalDetails {
  id                              String                           @id @default(uuid())
  userId                          String
  fullName                        String
  email                           String
  phoneNumber                     String
  altPhoneNumber                  String?
  territoryId                     String
  state                           String?
  district                        String?
  city                            String?
  streetAddress                   String?
  pincode                         String?
  aadharFront                     String?
  aadharFrontIsApproved           Boolean                          @default(false)
  aadharBack                      String?
  aadharBackIsApproved            Boolean                          @default(false)
  panCard                         String?
  panCardIsApproved               Boolean                          @default(false)
  companyPan                      String?
  companyPanIsApproved            Boolean                          @default(false)
  gstNumber                       String?
  addressProof                    String?
  addressProofIsApproved          Boolean                          @default(false)
  attachedImage                   String?
  attachedImageIsApproved         Boolean                          @default(false)
  oppurtunity                     String?
  isPaymentCompleted              Boolean                          @default(false)
  createdAt                       DateTime                         @default(now())
  updatedAt                       DateTime                         @updatedAt
  officeDetails                   BookingFormOfficeDetails?
  paymentDetails                  BookingFormPaymentDetails?
  territory                       Territory                        @relation(fields: [territoryId], references: [id])
  expectedPaymentScheduledDetails ExpectedPaymentSceduledDetails[]
  paymentScheduledDetails         PaymentSceduledDetails[]
}

model BookingFormOfficeDetails {
  id                             String                     @id @default(uuid())
  officeBranchId                 String?
  leadSuccessCoordinatorId       String?
  partnerRelationshipExecutiveId String?
  salesOnboardingManagerId       String?
  leadSource                     String?
  personalDetailsId              String                     @unique
  leadSuccessCoordinator         User?                      @relation("LeadSuccessCoordinator", fields: [leadSuccessCoordinatorId], references: [id])
  officeBranch                   Branch?                    @relation(fields: [officeBranchId], references: [id])
  partnerRelationshipExecutive   User?                      @relation("PartnerRelationshipExecutive", fields: [partnerRelationshipExecutiveId], references: [id])
  personalDetails                BookingFormPersonalDetails @relation(fields: [personalDetailsId], references: [id])
  salesOnboardingManager         User?                      @relation("SalesOnboardingManager", fields: [salesOnboardingManagerId], references: [id])
}

model BookingFormPaymentDetails {
  id                   String                     @id @default(uuid())
  dealAmount           Float?
  tokenReceived        Float?
  isTokenApproved      Boolean                    @default(false)
  tokenDate            DateTime?
  balanceDue           Float?
  paymentProof         String?
  modeOfPayment        String?
  additionalCommitment String?
  remarks              String?
  personalDetailsId    String                     @unique
  personalDetails      BookingFormPersonalDetails @relation(fields: [personalDetailsId], references: [id])
}

model PaymentSceduledDetails {
  id                String                     @id @default(uuid())
  date              DateTime?
  amount            Float?
  isAmountApproved  Boolean                    @default(false)
  paymentProof      String
  personalDetailsId String
  personalDetails   BookingFormPersonalDetails @relation(fields: [personalDetailsId], references: [id])
}

model ExpectedPaymentSceduledDetails {
  id                String                     @id @default(uuid())
  date              DateTime?
  amount            Float?
  personalDetailsId String
  personalDetails   BookingFormPersonalDetails @relation(fields: [personalDetailsId], references: [id])
}

enum UserLevel {
  ADMINISTRATE
  HEAD
  MANAGER
  EXECUTIVE
  ASSOCIATE
}

enum AssignmentType {
  MANUALLY
  AUTOMATICALLY
  USER
}
